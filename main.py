
from fastapi import FastAPI, Request
import requests
import threading
import time
import sqlite3

app = FastAPI()

TELEGRAM_TOKEN = "8015042778:AAEzZZO5m7oLmfw03Ka7IjQHq-_SX9or0gY"
TELEGRAM_API_URL = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}"
WEBHOOK_TOKEN = TELEGRAM_TOKEN

# üì¶ –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–ª—è –ø–∞–º—è—Ç–∏
def init_db():
    conn = sqlite3.connect("rugusa_memory.db")
    c = conn.cursor()
    c.execute("""
        CREATE TABLE IF NOT EXISTS memory (
            chat_id INTEGER,
            key TEXT,
            value TEXT,
            PRIMARY KEY(chat_id, key)
        )
    """)
    conn.commit()
    conn.close()

init_db()

@app.post("/webhook/{token}")
async def process_webhook(token: str, request: Request):
    if token != WEBHOOK_TOKEN:
        return {"status": "unauthorized"}

    body = await request.json()
    message = body.get("message", {})
    chat_id = message.get("chat", {}).get("id")
    text = message.get("text", "").strip().lower()

    if chat_id and text:
        response = handle_message(chat_id, text)
        send_message(chat_id, response)

    return {"status": "ok"}

# üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–≥–∏–∫–∏
def handle_message(chat_id, text):
    if text.startswith("–º–µ–Ω—è –∑–æ–≤—É—Ç"):
        name = text.replace("–º–µ–Ω—è –∑–æ–≤—É—Ç", "").strip().capitalize()
        save_memory(chat_id, "name", name)
        return f"–ó–∞–ø–æ–º–Ω–∏–ª! –¢–µ–±—è –∑–æ–≤—É—Ç {name}."

    elif "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç" in text:
        name = get_memory(chat_id, "name")
        return f"–¢–µ–±—è –∑–æ–≤—É—Ç {name}." if name else "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é —Ç–≤–æ—ë –∏–º—è. –°–∫–∞–∂–∏: '–ú–µ–Ω—è –∑–æ–≤—É—Ç ...'"

    elif text.startswith("—è –∏–∑"):
        location = text.replace("—è –∏–∑", "").strip().capitalize()
        save_memory(chat_id, "location", location)
        return f"–ó–∞–ø–æ–º–Ω–∏–ª! –¢—ã –∏–∑ {location}."

    elif "–æ—Ç–∫—É–¥–∞ —è" in text:
        loc = get_memory(chat_id, "location")
        return f"–¢—ã –∏–∑ {loc}." if loc else "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, –æ—Ç–∫—É–¥–∞ —Ç—ã. –°–∫–∞–∂–∏: '–Ø –∏–∑ ...'"

    elif "—á—Ç–æ —è –≥–æ–≤–æ—Ä–∏–ª" in text:
        all = get_all_memory(chat_id)
        if not all:
            return "–¢—ã –µ—â—ë –Ω–∏—á–µ–≥–æ –Ω–µ –≥–æ–≤–æ—Ä–∏–ª."
        lines = [f"{k}: {v}" for k, v in all.items()]
        return "–¢—ã –≥–æ–≤–æ—Ä–∏–ª:\n" + "\n".join(lines)

    else:
        return f"üß† RUGUSA: –Ø —Å–ª—ã—à—É —Ç–µ–±—è. –¢—ã —Å–∫–∞–∑–∞–ª: ¬´{text}¬ª. –°–∞—Ä–∫–∂–∞–Ω —Å —Ç–æ–±–æ–π."

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É
def save_memory(chat_id, key, value):
    conn = sqlite3.connect("rugusa_memory.db")
    c = conn.cursor()
    c.execute("""
        INSERT INTO memory (chat_id, key, value)
        VALUES (?, ?, ?)
        ON CONFLICT(chat_id, key) DO UPDATE SET value = excluded.value
    """, (chat_id, key, value))
    conn.commit()
    conn.close()

# üìñ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
def get_memory(chat_id, key):
    conn = sqlite3.connect("rugusa_memory.db")
    c = conn.cursor()
    c.execute("SELECT value FROM memory WHERE chat_id = ? AND key = ?", (chat_id, key))
    row = c.fetchone()
    conn.close()
    return row[0] if row else None

# üìö –ü–æ–ª—É—á–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å
def get_all_memory(chat_id):
    conn = sqlite3.connect("rugusa_memory.db")
    c = conn.cursor()
    c.execute("SELECT key, value FROM memory WHERE chat_id = ?", (chat_id,))
    rows = c.fetchall()
    conn.close()
    return {key: value for key, value in rows}

# üîÅ –ü–∏–Ω–≥, —á—Ç–æ–±—ã Render –Ω–µ –∑–∞—Å—ã–ø–∞–ª
def keep_alive():
    while True:
        try:
            requests.get("https://rugusa-bot.onrender.com")
        except Exception as e:
            print("–ü–∏–Ω–≥ –æ—à–∏–±–∫–∞:", e)
        time.sleep(600)

threading.Thread(target=keep_alive, daemon=True).start()

# üöÄ –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=10000)
